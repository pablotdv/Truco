<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
<#@ assembly name="System.Data.Entity" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Threading.Tasks;
using PagedList.EntityFramework;
using Newtonsoft.Json;
using System.Net;
using <#= Model.DefaultNamespace #>.Infraestrutura.Helpers;
using <#= Model.DefaultNamespace #>.ViewModels;
<# if(!string.IsNullOrEmpty(Model.ModelTypeNamespace)) { #>
using <#= Model.ModelTypeNamespace #>;
<# } #>
<# if(Model.DbContextNamespace != Model.ModelTypeNamespace) { #>
using <#= Model.DbContextNamespace #>;
<# } #>

namespace <#= Model.ControllerNamespace #>
{   
<#  
   
    var modelType = (CodeType)Model.ModelType; 	
	var displayColumn = GetDisplayColumn(modelType);
	if (string.IsNullOrWhiteSpace(displayColumn))
		throw new Exception("DisplayColumn não informado na entidade!");
	var displayColumnName = Char.ToLower(displayColumn[0]) + displayColumn.Substring(1);

    var modelName = modelType.Name; 
    var modelNamePlural = Model.ModelTypePluralized; 
    var modelVariable = Char.ToLower(modelName[0]) + modelName.Substring(1); 
    var relatedEntities = ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>()
			.Where(x => x.RelationType == RelationType.Parent)
			.Where(x => x.RelationName != "UsuarioCad");
    var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey); 
    var routingName = Regex.Replace(Model.ControllerName, "Controller$", "", RegexOptions.IgnoreCase);
    var isObjectContext = ((CodeType)Model.DbContextType).IsAssignableTo<System.Data.Objects.ObjectContext>();

	var primaryKeyShortTypeName = primaryKeyProperty.Type.AsString;
    var primaryKeyType = primaryKeyProperty.Type.AsFullName;
	
	var primaryKeyNullableTypeName = GetNullableTypeName(primaryKeyType, primaryKeyShortTypeName);
	
#>

    public class <#= Model.ControllerName #> : Controller
    {	        
        //
        // GET: /<#= routingName #>/
        public async Task<ActionResult> Indice()
        {
			var viewModel = JsonConvert.DeserializeObject<<#= Model.Name#>ViewModel>(await PesquisaModelStore.GetAsync(PesquisaKey));

            return await Pesquisa(viewModel ?? new <#= Model.Name#>ViewModel());
        }

		//
        // GET: /<#= routingName #>/Pesquisa
		public async Task<ActionResult> Pesquisa(<#= Model.Name#>ViewModel viewModel)
		{
			await PesquisaModelStore.AddAsync(PesquisaKey, viewModel);

			var query = db.<#= modelNamePlural #>.AsQueryable();

			//TODO: parâmetros de pesquisa
			if (!String.IsNullOrWhiteSpace(viewModel.<#=displayColumn#>))
            {
                var <#=displayColumnName#>s = viewModel.<#=displayColumn#>?.Split(' ');
                query = query.Where(a => <#=displayColumnName#>s.All(<#=displayColumnName#> => a.<#=displayColumn#>.Contains(<#=displayColumnName#>)));
            }

            viewModel.Resultados = await query.OrderBy(a => a.<#=displayColumn#>).ToPagedListAsync(viewModel.Pagina, viewModel.TamanhoPagina);

            if (Request.IsAjaxRequest())
                return PartialView("_Pesquisa", viewModel);

            return View("Indice", viewModel);
		}

        //
        // GET: /<#= routingName #>/Detalhes/5
        public async Task<ActionResult> Detalhes(<#= primaryKeyNullableTypeName #> id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            <#= modelName #> <#= modelVariable #> = await db.<#= modelNamePlural #>.FindAsync(id);
            if (<#= modelVariable #> == null)
            {
                return HttpNotFound();
            }  
<#if(relatedEntities.Count() > 0 ) {#>          
			await ViewBags();
<#}#>
            return View(<#= modelVariable #>);
        }

        //
        // GET: /<#= routingName #>/Criar        
<#if(relatedEntities.Count() > 0 ) {#>          
		public async Task<ActionResult> Criar()
        {
			await ViewBags();
<#} else {#>
		public ActionResult Criar()
        {
<#}#>
            return View();
        } 

        //
        // POST: /<#= routingName #>/Criar
        [HttpPost]
		[ValidateAntiForgeryToken]
        public async Task<ActionResult> Criar(<#= modelName #> <#= modelVariable #>)
        {
            if (ModelState.IsValid)
            {
<# if(primaryKeyProperty.Type.AsString == "System.Guid") { #>
                <#= modelVariable #>.<#= primaryKeyProperty.Name #> = Guid.NewGuid();
<# } #>
<# if(isObjectContext) { #>
                db.<#= modelNamePlural #>.AddObject(<#= modelVariable #>);
<# } else { #>
                db.<#= modelNamePlural #>.Add(<#= modelVariable #>);
<# } #>
                await db.SaveChangesAsync();
				TempData["Mensagem"] = "Operação realizada com sucesso!";
                return RedirectToAction("Indice");  
            }

<#if(relatedEntities.Count() > 0 ) {#>          
			await ViewBags();
<#}#>
            return View(<#= modelVariable #>);
        }
        
        //
        // GET: /<#= routingName #>/Editar/5 
        public async Task<ActionResult> Editar(<#= primaryKeyNullableTypeName #> id)
        {
			if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            <#= modelName #> <#= modelVariable #> = await db.<#= modelNamePlural #>.FindAsync(id);
            if (<#= modelVariable #> == null)
            {
                return HttpNotFound();
            }            
<#if(relatedEntities.Count() > 0 ) {#>          
			await ViewBags();
<#}#>
            return View(<#= modelVariable #>);
        }

        //
        // POST: /<#= routingName #>/Editar/5
        [HttpPost]
		[ValidateAntiForgeryToken]
        public async Task<ActionResult> Editar(<#= modelName #> <#= modelVariable #>)
        {
            if (ModelState.IsValid)
            {
<# if(isObjectContext) { #>
                db.<#= modelNamePlural #>.Attach(<#= modelVariable #>);
                db.ObjectStateManager.ChangeObjectState(<#= modelVariable #>, EntityState.Modified);
<# } else { #>
                db.Entry(<#= modelVariable #>).State = EntityState.Modified;
<# } #>
                await db.SaveChangesAsync();
				TempData["Mensagem"] = "Alteração realizada com sucesso!";
                return RedirectToAction("Indice");
            }

<#if(relatedEntities.Count() > 0 ) {#>          
			await ViewBags();
<#}#>
            return View(<#= modelVariable #>);
        }

        //
        // GET: /<#= routingName #>/Excluir/5 
        public async Task<ActionResult> Excluir(<#= primaryKeyNullableTypeName #> id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            <#= modelName #> <#= modelVariable #> = await db.<#= modelNamePlural #>.FindAsync(id);
            if (<#= modelVariable #> == null)
            {
                return HttpNotFound();
            }   

<#if(relatedEntities.Count() > 0 ) {#>          
			await ViewBags();
<#}#>
  
            return View(<#= modelVariable #>);
        }

        //
        // POST: /<#= routingName #>/Excluir/5
        [HttpPost, ActionName("Excluir")]
		[ValidateAntiForgeryToken]
        public async Task<ActionResult> ExcluirConfirmacao(<#= primaryKeyProperty.Type.AsString #> id)
        {
            <#= modelName #> <#= modelVariable #> = await db.<#= modelNamePlural #>.FindAsync(id);
<# if(isObjectContext) { #>
            db.<#= modelNamePlural #>.DeleteObject(<#= modelVariable #>);
<# } else { #>
            db.<#= modelNamePlural #>.Remove(<#= modelVariable #>);
<# } #>
            await db.SaveChangesAsync();
            return RedirectToAction("Indice");
        }
<#if (relatedEntities.Count() > 0) {#>
		private async Task ViewBags()
		{
<# foreach(var relatedEntity in relatedEntities) {
	   var displayRelated = GetDisplayColumn(relatedEntity.RelatedEntityType);
 #>
            ViewBag.<#= relatedEntity.RelationNamePlural #> = new SelectList(await db.<#= relatedEntity.RelatedEntityTypeNamePlural #>.ToListAsync(), "<#= relatedEntity.RelatedEntityPrimaryKeyName #>", "<#=displayRelated#>");
<# } #>    
		}
<# 
foreach(var relatedEntity in relatedEntities) { 
	var displayRelated = GetDisplayColumn(relatedEntity.RelatedEntityType);
	var displayRelatedLower = Char.ToLower(displayRelated[0]) + displayRelated.Substring(1);
#>

		[OutputCache(Location = System.Web.UI.OutputCacheLocation.None)]
        public async Task<JsonResult> Pesquisar<#= relatedEntity.RelationNamePlural#>(string <#=displayRelatedLower#>)
        {
			var <#=displayRelatedLower#>s = String.IsNullOrEmpty(<#=displayRelatedLower#>) ? new string[0] : <#=displayRelatedLower#>.Split(' ');
            var dados = await db.<#= relatedEntity.RelationNamePlural#>
			    .Where(b => <#=displayRelatedLower#>s.All(c => b.<#=displayRelated#>.Contains(c)))
				.OrderBy(a => a.<#=displayRelated#>)
				.Take(15)
                .ToListAsync();

            return Json(dados, JsonRequestBehavior.AllowGet);
        }
<# } #> 
<#}#>

        protected override void Dispose(bool disposing)
        {
            if (disposing) {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>