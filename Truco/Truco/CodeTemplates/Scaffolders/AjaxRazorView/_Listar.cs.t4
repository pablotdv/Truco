<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output extension="cshtml" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="EnvDTE" #>
<# var viewDataType = (CodeType) Model.ViewDataType;
   var modelType = (CodeType)Model.ModelType;
   var modelName = modelType.Name;
   var modelNamePlural = Model.ModelTypePluralized; 
   var modelVariable = Char.ToLower(modelName[0]) + modelName.Substring(1); 
   var fkName = Char.ToLower(Model.FkName[0]) + Model.FkName.Substring(1);
   var displayColumn = GetDisplayColumn(modelType);
#>
@using <#= Model.ViewModelsNamespace #>
@model <#= modelName #>ViewModel
@{
    var ajaxOptionsEditar = new AjaxOptions()
    {
        HttpMethod = "GET",
        InsertionMode = InsertionMode.Replace,
        UpdateTargetId = "<#=modelVariable#>",
        OnFailure = "OnFailureEditar"
    };

    var ajaxOptionsExcluir = new AjaxOptions()
    {
        HttpMethod = "GET",
        InsertionMode = InsertionMode.Replace,
        UpdateTargetId = "<#=modelVariable#>",
        OnFailure = "OnFailureExcluir"
    };

    var ajaxOptionsPesquisar = new AjaxOptions()
    {
        HttpMethod = "GET",
        InsertionMode = InsertionMode.Replace,
        UpdateTargetId = "<#=modelVariable#>",
        OnFailure = "OnFailurePesquisar"
    };
	var isEditar = User.IsAuthorized("<#=modelName#>Partial", "Editar", "<#=Model.Area#>");
    var isExcluir = User.IsAuthorized("<#=modelName#>Partial", "Excluir", "<#=Model.Area#>");
}
@using (Ajax.BeginForm("Pesquisar", "<#=modelName#>Partial", ajaxOptionsPesquisar))
{
    @Html.HiddenFor(a => a.<#=Model.FkName#>)
    <div class="row form-group">
        <div class="col-md-4 col-xs-6">
            @Html.LabelFor(model => model.<#=displayColumn#>, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.<#=displayColumn#>, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.<#=displayColumn#>, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="btn-group">
                <button type="submit" class="btn btn-default" id="submit" name="submit">Pesquisar</button>
            </div>
        </div>
    </div>
}

<div id="no-more-tables">
	<table class="table-bordered table-striped table-condensed cf table-hover col-md-12">
		<thead class="cf">
			<tr>
				@if (isEditar || isExcluir)
                {
					<th class="col-lg-2 col-md-3 col-xs-12"></th>
				}
<#
List<ModelProperty> temp = GetModelProperties(Model.ViewDataType, false);
var properties = temp.Where(a=> a.Name != "Ativo" && a.Name != "DataHoraCad" && a.Name != "UsuarioCad");
foreach (ModelProperty property in properties) {
    if (!property.IsPrimaryKey && !property.IsForeignKey) {
#>
				<th>
					<#= property.Name #>
				</th>
<#
    }
}
#>                                
            </tr>
        </thead>

        <tbody>
			@foreach (var item in Model.Resultados) 
			{
				<tr>
<# if (!String.IsNullOrEmpty(Model.PrimaryKeyName)) { #>
					<td data-title="">
                        <div class="btn-group">
							@if (isEditar)
                            {
								@Ajax.RawActionLink("<i class=\"fa fa-edit fa-align-left\"></i>", "Editar", "<#=modelName#>Partial", new { id = item.<#=modelName#>Id }, ajaxOptionsEditar, new { @class = "btn btn-default", @title = "Editar" })
							}
							@if (isExcluir)
							{
								@Ajax.RawActionLink("<i class=\"fa fa-trash fa-align-right\"></i>", "Excluir", "<#=modelName#>Partial", new { id = item.<#=modelName#>Id }, ajaxOptionsExcluir, new { @class = "btn btn-default", @title = "Excluir" })
							}
                        </div>
                    </td>
<# } else { #>
					<td data-title="">
						<div class="btn-group">
							@if (isEditar)
                            {
								<a class="btn btn-default" id="editar" title="Editar" href="@Url.Action("Editar", new {  /* id=item.PrimaryKey */ })"><i class="fa fa-edit fa-align-left"></i></a>							
							}
							@if (isExcluir)
							{
								<a class="btn btn-default" id="Deletar" title="Excluir" href="@Url.Action("Excluir", new {  /* id=item.PrimaryKey */  })"><i class="fa fa-trash fa-align-right"></i></a>
							}
						</div>
					</td>
<# } #>
<#  
foreach (ModelProperty property in properties) {
    if (!property.IsPrimaryKey && !property.IsForeignKey) {
#>
					<td data-title="<#= property.Name #>">
						@<#= property.ValueExpression.Replace("Model.", "item.") #>
					</td>
<#
    }
}
#>
				</tr>
			}                            
        </tbody>
    </table>
</div>

@Html.PagedListPager(Model.Resultados, page => Url.Action("Pesquisa", 
	new <#= modelName #>ViewModel()
    {
        Pagina = page,
        <#=displayColumn#> = Model.<#=displayColumn#>
    }), PagedListRenderOptionsCustom.CustomAjax("<#=modelVariable#>"))
<script>
    function OnFailureEditar(xhr, status, error) {
        alert('Falha ao carregar registro para edição!\n' + error)
    }

    function OnFailureExcluir(xhr, status, error) {
        alert('Falha ao carregar registro para exclusão!\n' + error)
    }

    function OnFailurePesquisar(xhr, status, error) {
        alert('Falha ao realizar a pesquisa!\n' + error)
    }
</script>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>